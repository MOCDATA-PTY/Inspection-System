# Generated by Django 5.1.7 on 2025-09-25 06:34

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('main', '0001_add_user_role_fields'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Inspection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inspector', models.CharField(help_text='Inspector name (e.g., Cinga Ngongo)', max_length=100)),
                ('inspection_number', models.PositiveIntegerField(help_text='Sequential inspection number')),
                ('inspection_date', models.DateField(help_text='Date of inspection')),
                ('facility_client_name', models.CharField(help_text='Facility or client name', max_length=200)),
                ('town', models.CharField(blank=True, help_text='Town/location', max_length=100, null=True)),
                ('commodity', models.CharField(blank=True, help_text='Commodity type (e.g., RAW)', max_length=50, null=True)),
                ('product_name', models.CharField(blank=True, help_text='Product name (e.g., Mince, Mildwors)', max_length=100, null=True)),
                ('product_class', models.CharField(blank=True, help_text='Product class (e.g., Raw species sausage / wors)', max_length=100, null=True)),
                ('inspected', models.BooleanField(default=False, help_text='Was inspection conducted?')),
                ('sampled', models.BooleanField(default=False, help_text='Was sampling conducted?')),
                ('normal_hours', models.DecimalField(blank=True, decimal_places=1, help_text='Normal hours worked', max_digits=4, null=True)),
                ('kilometres_traveled', models.DecimalField(blank=True, decimal_places=1, help_text='Kilometres traveled', max_digits=6, null=True)),
                ('fat', models.BooleanField(default=False, help_text='Fat testing required')),
                ('protein', models.BooleanField(default=False, help_text='Protein testing required')),
                ('calcium', models.BooleanField(default=False, help_text='Calcium testing required')),
                ('dna', models.BooleanField(default=False, help_text='DNA testing required')),
                ('bought_sample_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Amount paid for sample', max_digits=8, null=True)),
                ('lab_used', models.CharField(blank=True, help_text='Laboratory used (e.g., Food Safety Laboratory)', max_length=100, null=True)),
                ('follow_up', models.BooleanField(default=False, help_text='Follow-up required')),
                ('occurrence_report', models.BooleanField(default=False, help_text='Occurrence report required')),
                ('dispensation_application', models.BooleanField(default=False, help_text='Dispensation application required')),
                ('comments', models.TextField(blank=True, help_text='Additional comments or notes', null=True)),
                ('uploaded', models.BooleanField(default=False, help_text='Files uploaded')),
                ('rfi_reference_number', models.CharField(blank=True, help_text='RFI reference number', max_length=100, null=True)),
                ('invoice_reference_number', models.CharField(blank=True, help_text='Invoice reference number', max_length=100, null=True)),
                ('lab_result_reference_number', models.CharField(blank=True, help_text='Lab result reference number', max_length=100, null=True)),
                ('re_test', models.BooleanField(default=False, help_text='Re-test required')),
                ('re_test_reference_number', models.CharField(blank=True, help_text='Re-test reference number', max_length=100, null=True)),
                ('verification_external_testing', models.BooleanField(default=False, help_text='External testing verification required')),
                ('compliance_document', models.BooleanField(default=False, help_text='Compliance document required')),
                ('direction_expiry_date', models.DateField(blank=True, help_text='Direction expiry date', null=True)),
                ('email', models.EmailField(blank=True, help_text='Primary email contact', max_length=254, null=True)),
                ('additional_email_1', models.EmailField(blank=True, help_text='Additional email contact 1', max_length=254, null=True)),
                ('additional_email_2', models.EmailField(blank=True, help_text='Additional email contact 2', max_length=254, null=True)),
                ('additional_email_3', models.EmailField(blank=True, help_text='Additional email contact 3', max_length=254, null=True)),
                ('additional_email_4', models.EmailField(blank=True, help_text='Additional email contact 4', max_length=254, null=True)),
                ('was_mail_sent', models.BooleanField(default=False, help_text='Was email sent?')),
                ('compiled_supporting_documents', models.BooleanField(default=False, help_text='Supporting documents compiled')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Inspection',
                'verbose_name_plural': 'Inspections',
                'db_table': 'inspections',
                'ordering': ['-inspection_date', '-inspection_number'],
            },
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_sync', models.BooleanField(default=False, help_text='Automatically sync data every 24 hours')),
                ('backup_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='weekly', help_text='Backup frequency', max_length=20)),
                ('session_timeout', models.IntegerField(default=30, help_text='Session timeout in minutes')),
                ('dark_mode', models.BooleanField(default=False, help_text='Enable dark mode theme')),
                ('google_sheets_enabled', models.BooleanField(default=True, help_text='Enable Google Sheets integration')),
                ('sql_server_enabled', models.BooleanField(default=True, help_text='Enable SQL Server integration')),
                ('sync_interval', models.IntegerField(default=24, help_text='Sync interval value')),
                ('sync_interval_unit', models.CharField(choices=[('minutes', 'Minutes'), ('hours', 'Hours'), ('days', 'Days')], default='hours', help_text='Sync interval unit', max_length=10)),
                ('email_notifications', models.BooleanField(default=False, help_text='Enable email notifications')),
                ('sync_notifications', models.BooleanField(default=True, help_text='Notify when data synchronization completes')),
                ('notification_email', models.EmailField(blank=True, help_text='Email address for notifications', max_length=254, null=True)),
                ('two_factor_auth', models.BooleanField(default=False, help_text='Enable two-factor authentication')),
                ('password_expiry', models.IntegerField(default=90, help_text='Password expiry in days')),
                ('max_login_attempts', models.IntegerField(default=5, help_text='Maximum login attempts')),
                ('compliance_auto_sync', models.BooleanField(default=False, help_text='Enable automatic compliance document syncing')),
                ('compliance_sync_interval', models.IntegerField(default=5, help_text='Compliance sync interval value')),
                ('compliance_sync_unit', models.CharField(choices=[('minutes', 'Minutes'), ('hours', 'Hours'), ('days', 'Days')], default='minutes', help_text='Compliance sync interval unit', max_length=10)),
                ('compliance_batch_mode', models.CharField(choices=[('batch', 'Process in Batches'), ('all', 'Process ALL at Once')], default='batch', help_text='Processing mode: batches or all documents at once', max_length=20)),
                ('compliance_batch_size', models.IntegerField(default=50, help_text='Number of inspections to process per batch (only for batch mode)')),
                ('compliance_date_range', models.IntegerField(default=7, help_text='Process inspections from last N days (only for batch mode)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Settings',
                'verbose_name_plural': 'Settings',
            },
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_sync_enabled', models.BooleanField(default=False, verbose_name='Enable Auto Sync')),
                ('backup_frequency_days', models.IntegerField(default=7, verbose_name='Backup Frequency (days)')),
                ('session_timeout_minutes', models.IntegerField(default=30, verbose_name='Session Timeout (minutes)')),
                ('google_sheets_enabled', models.BooleanField(default=True, verbose_name='Google Sheets Integration')),
                ('sql_server_enabled', models.BooleanField(default=True, verbose_name='SQL Server Integration')),
                ('sync_interval_hours', models.FloatField(default=24.0, verbose_name='Sync Interval (hours)')),
                ('compliance_sync_enabled', models.BooleanField(default=True, verbose_name='Enable Automatic Compliance Sync')),
                ('compliance_sync_interval_hours', models.IntegerField(default=24, verbose_name='Compliance Sync Interval (hours)')),
                ('compliance_processing_mode', models.CharField(choices=[('all_at_once', 'Process ALL at Once'), ('incremental', 'Incremental Processing'), ('manual', 'Manual Processing Only')], default='incremental', max_length=20, verbose_name='Processing Mode')),
                ('compliance_daily_sync_enabled', models.BooleanField(default=True, verbose_name='Enable Daily Compliance Sync')),
                ('compliance_last_processed_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Compliance Process Date')),
                ('compliance_skip_processed', models.BooleanField(default=True, verbose_name='Skip Already Processed Documents')),
                ('priority_1_interval', models.IntegerField(default=1, verbose_name='First 2 Months Refresh Interval')),
                ('priority_1_unit', models.CharField(default='hours', max_length=10, verbose_name='First 2 Months Unit')),
                ('priority_2_interval', models.IntegerField(default=2, verbose_name='Last 2 Months Refresh Interval')),
                ('priority_2_unit', models.CharField(default='hours', max_length=10, verbose_name='Last 2 Months Unit')),
                ('onedrive_enabled', models.BooleanField(default=True, verbose_name='OneDrive Integration')),
                ('onedrive_local_caching', models.BooleanField(default=True, verbose_name='Enable Local File Caching')),
                ('onedrive_cache_days', models.IntegerField(default=60, verbose_name='Cache Duration (Days)')),
                ('onedrive_auto_sync', models.BooleanField(default=True, verbose_name='Enable Auto Sync')),
                ('onedrive_sync_interval_hours', models.IntegerField(default=2, verbose_name='Sync Interval (Hours)')),
                ('onedrive_upload_delay_days', models.IntegerField(default=3, verbose_name='Upload Delay (Days)')),
                ('onedrive_upload_delay_unit', models.CharField(choices=[('hours', 'Hours'), ('days', 'Days'), ('weeks', 'Weeks'), ('months', 'Months'), ('years', 'Years')], default='days', max_length=10, verbose_name='Upload Delay Unit')),
                ('theme_mode', models.CharField(choices=[('light', 'Light Mode'), ('dark', 'Dark Mode'), ('auto', 'Auto')], default='light', max_length=10, verbose_name='Theme Mode')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'System Setting',
                'verbose_name_plural': 'System Settings',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.CharField(db_index=True, max_length=200, unique=True)),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Client Name')),
                ('internal_account_code', models.CharField(blank=True, help_text='From Google Sheets Column H', max_length=100, null=True, verbose_name='Internal Account Code')),
                ('email', models.EmailField(blank=True, help_text='From Google Sheets Column K', max_length=254, null=True, verbose_name='Client Email')),
                ('manual_email', models.EmailField(blank=True, help_text='Manually added email that persists across syncs', max_length=254, null=True, verbose_name='Manual Email Override')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
                'db_table': 'food_safety_agency_clients',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['client_id'], name='food_safety_client__a6d82c_idx'), models.Index(fields=['name'], name='food_safety_name_be0e7e_idx'), models.Index(fields=['internal_account_code'], name='food_safety_interna_923e6c_idx')],
            },
        ),
        migrations.CreateModel(
            name='InspectorMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inspector_id', models.IntegerField(help_text='Server inspector ID (e.g., 1234567)', unique=True)),
                ('inspector_name', models.CharField(help_text='Human-readable inspector name (e.g., Ethan)', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this inspector is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Inspector Mapping',
                'verbose_name_plural': 'Inspector Mappings',
                'db_table': 'inspector_mappings',
                'ordering': ['inspector_name'],
                'indexes': [models.Index(fields=['inspector_id'], name='inspector_m_inspect_d0ffe1_idx'), models.Index(fields=['inspector_name'], name='inspector_m_inspect_46f912_idx')],
            },
        ),
        migrations.CreateModel(
            name='ClientEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('label', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_emails', to='main.client')),
            ],
            options={
                'db_table': 'food_safety_agency_client_emails',
                'indexes': [models.Index(fields=['email'], name='food_safety_email_273f98_idx'), models.Index(fields=['client'], name='food_safety_client__cff284_idx')],
            },
        ),
        migrations.CreateModel(
            name='FoodSafetyAgencyInspection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commodity', models.CharField(blank=True, help_text='Commodity type (e.g., POULTRY, RAW, PMP, EGGS)', max_length=50, null=True)),
                ('date_of_inspection', models.DateField(blank=True, help_text='Date of inspection', null=True)),
                ('start_of_inspection', models.TimeField(blank=True, help_text='Start time of inspection', null=True)),
                ('end_of_inspection', models.TimeField(blank=True, help_text='End time of inspection', null=True)),
                ('inspection_location_type_id', models.IntegerField(blank=True, help_text='Inspection location type ID', null=True)),
                ('is_direction_present_for_this_inspection', models.BooleanField(default=False, help_text='Direction present for this inspection')),
                ('inspector_id', models.IntegerField(blank=True, help_text='Inspector ID from remote system', null=True)),
                ('inspector_name', models.CharField(blank=True, help_text='Human-readable inspector name', max_length=100, null=True)),
                ('latitude', models.CharField(blank=True, help_text='GPS Latitude', max_length=20, null=True)),
                ('longitude', models.CharField(blank=True, help_text='GPS Longitude', max_length=20, null=True)),
                ('product_name', models.CharField(blank=True, help_text='Product name (e.g., Mince, Burger, Boerewors)', max_length=150, null=True)),
                ('product_class', models.CharField(blank=True, help_text='Product class/category', max_length=150, null=True)),
                ('is_sample_taken', models.BooleanField(blank=True, help_text='Was sample taken during inspection', null=True)),
                ('bought_sample', models.DecimalField(blank=True, decimal_places=2, help_text='Value of bought sample in Rand (ZAR)', max_digits=10, null=True)),
                ('inspection_travel_distance_km', models.DecimalField(blank=True, decimal_places=2, help_text='Travel distance in kilometers', max_digits=8, null=True)),
                ('km_traveled', models.DecimalField(blank=True, decimal_places=2, help_text='Manual entry of kilometers traveled', max_digits=8, null=True)),
                ('hours', models.DecimalField(blank=True, decimal_places=2, help_text='Manual entry of hours worked', max_digits=5, null=True)),
                ('lab', models.CharField(blank=True, choices=[('lab_a', 'Lab A'), ('lab_b', 'Lab B'), ('lab_c', 'Lab C'), ('lab_d', 'Lab D'), ('lab_e', 'Lab E'), ('lab_f', 'Lab F')], help_text='Laboratory used for testing', max_length=20, null=True)),
                ('remote_id', models.IntegerField(blank=True, help_text='Original ID from remote system', null=True)),
                ('client_name', models.CharField(blank=True, help_text='Client name from remote system', max_length=200, null=True)),
                ('fat', models.BooleanField(default=False, help_text='Fat testing required')),
                ('protein', models.BooleanField(default=False, help_text='Protein testing required')),
                ('calcium', models.BooleanField(default=False, help_text='Calcium testing required')),
                ('dna', models.BooleanField(default=False, help_text='DNA testing required')),
                ('needs_retest', models.CharField(blank=True, choices=[('YES', 'Yes'), ('NO', 'No')], help_text='Whether this inspection needs retesting', max_length=3, null=True, verbose_name='Needs Retest')),
                ('is_sent', models.BooleanField(default=False, help_text='Whether documents have been sent to client')),
                ('sent_date', models.DateTimeField(blank=True, help_text='Date when documents were sent', null=True)),
                ('onedrive_uploaded', models.BooleanField(default=False, help_text='Whether files have been uploaded to OneDrive')),
                ('onedrive_upload_date', models.DateTimeField(blank=True, help_text='Date when files were uploaded to OneDrive', null=True)),
                ('onedrive_folder_id', models.CharField(blank=True, help_text='OneDrive folder ID where files are stored', max_length=255, null=True)),
                ('rfi_uploaded_date', models.DateTimeField(blank=True, help_text='Date when RFI was uploaded', null=True)),
                ('invoice_uploaded_date', models.DateTimeField(blank=True, help_text='Date when Invoice was uploaded', null=True)),
                ('lab_uploaded_date', models.DateTimeField(blank=True, help_text='Date when Lab document was uploaded', null=True)),
                ('lab_form_uploaded_date', models.DateTimeField(blank=True, help_text='Date when Lab Form document was uploaded', null=True)),
                ('retest_uploaded_date', models.DateTimeField(blank=True, help_text='Date when Retest document was uploaded', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('invoice_uploaded_by', models.ForeignKey(blank=True, help_text='User who uploaded Invoice document', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoice_uploads', to=settings.AUTH_USER_MODEL)),
                ('lab_form_uploaded_by', models.ForeignKey(blank=True, help_text='User who uploaded Lab Form document', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lab_form_uploads', to=settings.AUTH_USER_MODEL)),
                ('lab_uploaded_by', models.ForeignKey(blank=True, help_text='User who uploaded Lab document', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lab_uploads', to=settings.AUTH_USER_MODEL)),
                ('retest_uploaded_by', models.ForeignKey(blank=True, help_text='User who uploaded Retest document', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='retest_uploads', to=settings.AUTH_USER_MODEL)),
                ('rfi_uploaded_by', models.ForeignKey(blank=True, help_text='User who uploaded RFI document', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rfi_uploads', to=settings.AUTH_USER_MODEL)),
                ('sent_by', models.ForeignKey(blank=True, help_text='User who marked documents as sent', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_inspections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Food Safety Agency Inspection',
                'verbose_name_plural': 'Food Safety Agency Inspections',
                'db_table': 'food_safety_agency_inspections',
                'ordering': ['-date_of_inspection', '-created_at'],
                'indexes': [models.Index(fields=['commodity'], name='food_safety_commodi_c598e6_idx'), models.Index(fields=['date_of_inspection'], name='food_safety_date_of_d2c2d7_idx'), models.Index(fields=['inspector_name'], name='food_safety_inspect_3f44db_idx'), models.Index(fields=['client_name'], name='food_safety_client__f07db9_idx'), models.Index(fields=['inspector_id'], name='food_safety_inspect_a2643c_idx')],
            },
        ),
        migrations.CreateModel(
            name='Shipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Claim_No', models.CharField(max_length=100, unique=True, verbose_name='Shipment Number')),
                ('client_reference', models.CharField(blank=True, help_text='Auto-generated client-specific reference (e.g., ClientName-1-20250601)', max_length=50, null=True, verbose_name='Client Reference')),
                ('Brand', models.CharField(blank=True, max_length=100, null=True, verbose_name='Brand')),
                ('Claimant', models.CharField(blank=True, max_length=200, null=True, verbose_name='Claimant Name')),
                ('Intent_To_Claim', models.CharField(blank=True, choices=[('YES', 'Yes'), ('NO', 'No')], max_length=3, null=True, verbose_name='Intent To Claim')),
                ('Intend_Claim_Date', models.DateField(blank=True, null=True, verbose_name='Intent To Claim Date')),
                ('Formal_Claim_Received', models.CharField(blank=True, choices=[('YES', 'Yes'), ('NO', 'No')], max_length=3, null=True, verbose_name='Formal Claim')),
                ('Formal_Claim_Date_Received', models.DateField(blank=True, null=True, verbose_name='Formal Claim Date')),
                ('Claimed_Amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Value')),
                ('Amount_Paid_By_Carrier', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Paid By Carrier')),
                ('Amount_Paid_By_Awa', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Paid By ISCM/AWA')),
                ('Amount_Paid_By_Insurance', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Paid By Insurance')),
                ('Total_Savings', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Total Savings')),
                ('Financial_Exposure', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Financial Exposure')),
                ('Settlement_Status', models.CharField(blank=True, choices=[('SETTLED', 'Settled'), ('NOT_SETTLED', 'Not Settled'), ('PARTIAL', 'Partially Settled')], max_length=15, null=True, verbose_name='Settled or Not Settled')),
                ('Status', models.CharField(choices=[('OPEN', 'Open'), ('PENDING', 'Pending'), ('CLOSED', 'Closed'), ('REJECTED', 'Rejected'), ('UNDER_REVIEW', 'Under Review')], default='OPEN', max_length=15, verbose_name='Status')),
                ('Closed_Date', models.DateField(blank=True, null=True, verbose_name='Closed Date')),
                ('Branch', models.CharField(choices=[('ATL', 'ATL'), ('CMU', 'CMU'), ('CON', 'CON'), ('DOR', 'DOR'), ('HEC', 'HEC'), ('HNL', 'HNL'), ('HOU', 'HOU'), ('ICS', 'ICS'), ('IMP', 'IMP'), ('JFK', 'JFK'), ('LCL', 'LCL'), ('ORD', 'ORD'), ('PPG', 'PPG')], max_length=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shipments', to='main.client')),
            ],
            options={
                'verbose_name': 'Shipment',
                'verbose_name_plural': 'Shipments',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['Claim_No'], name='main_shipme_Claim_N_a03a13_idx'), models.Index(fields=['client'], name='main_shipme_client__17eb8e_idx'), models.Index(fields=['Status'], name='main_shipme_Status_7826b6_idx'), models.Index(fields=['Branch'], name='main_shipme_Branch_16242a_idx'), models.Index(fields=['client_reference'], name='main_shipme_client__85a5d7_idx')],
            },
        ),
        migrations.CreateModel(
            name='SystemLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('LOGIN', 'User Login'), ('LOGOUT', 'User Logout'), ('CREATE', 'Create Record'), ('UPDATE', 'Update Record'), ('DELETE', 'Delete Record'), ('VIEW', 'View Page'), ('NAVIGATE', 'Navigate'), ('SYNC', 'Data Sync'), ('SETTINGS', 'Settings Change'), ('USER_MANAGEMENT', 'User Management'), ('PASSWORD_RESET', 'Password Reset'), ('FILE_UPLOAD', 'File Upload'), ('EXPORT', 'Data Export'), ('IMPORT', 'Data Import'), ('SEARCH', 'Search'), ('FILTER', 'Filter'), ('ERROR', 'Error'), ('WARNING', 'Warning'), ('INFO', 'Information')], max_length=50, verbose_name='Action Type')),
                ('page', models.CharField(blank=True, max_length=100, null=True, verbose_name='Page/URL')),
                ('object_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Object Type')),
                ('object_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Object ID')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('details', models.JSONField(blank=True, null=True, verbose_name='Additional Details')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, null=True, verbose_name='User Agent')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='system_logs', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'System Log',
                'verbose_name_plural': 'System Logs',
                'db_table': 'system_logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user'], name='system_logs_user_id_85bc8b_idx'), models.Index(fields=['action'], name='system_logs_action_04fbd3_idx'), models.Index(fields=['timestamp'], name='system_logs_timesta_84e60c_idx'), models.Index(fields=['page'], name='system_logs_page_1e22af_idx'), models.Index(fields=['object_type'], name='system_logs_object__209485_idx')],
            },
        ),
    ]
