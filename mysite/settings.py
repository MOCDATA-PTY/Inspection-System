"""
Django settings for mysite project.
Generated by 'django-admin startproject' using Django 5.1.7.
"""

from pathlib import Path
import os
import environ

# Initialize environment variables
env = environ.Env()
environ.Env.read_env()

# Build paths inside the projectccls
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@=2jh*jwvj#7=oh+4+ae2)y9j4ixy@f4l^5sf-3iv$2elvp4y#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

LOGIN_REDIRECT_URL = 'home'
LOGIN_URL = 'login'

# Session Configuration - Use database sessions to avoid Redis conflicts
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
print("Using database sessions to avoid Redis conflicts during sync operations")

SESSION_COOKIE_AGE = 86400  # Keep users logged in for 1 day
SESSION_SAVE_EVERY_REQUEST = True  # Save session on every request for long operations
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Keep session active after closing the browser
SESSION_COOKIE_SECURE = False  # Change to True if using HTTPS
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to cookies
SESSION_COOKIE_SAMESITE = 'Lax'  # Prevent session issues with CSRF

# CSRF Settings for better security and to prevent CSRF failures
CSRF_COOKIE_SECURE = False  # Set to True if using HTTPS
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access for AJAX
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_AGE = 86400  # 24 hours
CSRF_COOKIE_NAME = 'csrftoken'  # Default CSRF cookie name
CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'  # Default CSRF header name
CSRF_TOKEN_COOKIE_NAME = 'csrftoken'  # Ensure consistency
CSRF_USE_SESSIONS = False  # Use cookies instead of sessions for CSRF tokens
CSRF_COOKIE_PATH = '/'  # Make CSRF cookie available site-wide
CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1:8000',
    'http://localhost:8000',
    'https://127.0.0.1:8000',
    'https://localhost:8000',
]


ALLOWED_HOSTS = ["*"]  # Change this to your actual domain in production

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',  # Ensures static files work in dev mode too
    'main',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Enables static file serving in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'main.middleware.SessionTimeoutMiddleware',  # Custom session timeout middleware
    'main.middleware.ActivityLoggingMiddleware',  # Custom activity logging middleware
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'inspection_system',     # your database name
        'USER': 'ethan',                  # superuser we just set
        'PASSWORD': 'MagnumOpus123',     # superuser password
        'HOST': '82.25.97.159',          # your server IP
        'PORT': '5432',                   # default PostgreSQL port
    },
    'sql_server': {
        'ENGINE': 'mssql',
        'NAME': 'AFS',
        'USER': 'FSAUser2',
        'PASSWORD': 'password',
        'HOST': '102.67.140.12',
        'PORT': '1053',
        'OPTIONS': {
            'driver': 'ODBC Driver 17 for SQL Server',
            'trusted_connection': 'no',
        },
    }
}

# Redis Caching for Maximum Performance
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'SOCKET_CONNECT_TIMEOUT': 30,  # Increased timeout
            'SOCKET_TIMEOUT': 30,  # Increased timeout
            'CONNECTION_POOL_KWARGS': {'max_connections': 50},
        }
    }
}

# Server settings to handle large responses
DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50MB
MAX_UPLOAD_SIZE = 52428800  # 50MB

# Increase timeout for large responses
REQUEST_TIMEOUT = 300  # 5 minutes
RESPONSE_TIMEOUT = 300  # 5 minutes

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']  # Static files in development
STATIC_ROOT = BASE_DIR / 'staticfiles'  # Static files collected for production

# Performance and timeout settings to prevent broken pipes
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB max upload size
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000  # Allow more form fields
DATA_UPLOAD_MAX_NUMBER_FILES = 100  # Allow more files

# WhiteNoise settings (Compress and Cache static files)
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Media files (User uploads)
MEDIA_URL = '/media/'

# Local Media Storage
MEDIA_ROOT = BASE_DIR / 'media'  # Local media storage


# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# =============================
# OneDrive Integration Settings
# =============================
# Azure app registration values - Load from environment variables
ONEDRIVE_CLIENT_ID = env('ONEDRIVE_CLIENT_ID', default='e6e7e71e-9f96-41ac-a4c2-5ae0f347e56f')
ONEDRIVE_CLIENT_SECRET = env('ONEDRIVE_CLIENT_SECRET', default='.EF8Q~bdB4Njdl4tm0LuOgB4PA1sc636B7Z0Hb.Q')
ONEDRIVE_REDIRECT_URI = env('ONEDRIVE_REDIRECT_URI', default='http://localhost:8000/onedrive/callback')

# Feature flags
ONEDRIVE_ENABLED = True
PREFER_ONEDRIVE = True

# ZIP File Auto-Organization Settings
AUTO_ORGANIZE_ZIP_FILES = True  # Automatically organize ZIP files by inspection number